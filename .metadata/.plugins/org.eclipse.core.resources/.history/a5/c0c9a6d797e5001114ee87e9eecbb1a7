import com.borromeo.dnode.IntDLLNode;

// Nicholas Borromeo
// Carmel Jade T. Bual
// Doubly Linked List Exercise
// December 14, 2006

interface DLinkedListExercise {
    
    public boolean isEmpty();
    public void setToNull();
    public int firstEl();
    public void addToDLListHead(int el);
    public void addToDLListTail(int el);
    public int deleteFromDLListHead();
    public int deleteFromDLListTail();
    public void printAll();
    //public int find(int el);
    public boolean isInList(int el);
    
    // EXERCISE STARTS HERE 
    
    // 1). Delete an ith node on a doubly-linked list.  Be sure that such node exists.
	void deleteIthNode(int i);

	// 2). if p -> 2 in list 1 2 3, then after inserting 4, the list is 1 4 2 3;
	void insertBefore(IntDLLNode p, int n);

	// 3). if p -> 2 in list 1 2 3, then after inserting 4, the list is 1 2 4 3;
	void insertAfter(IntDLLNode p, int n);

	// 4). reverse a singly linked-list using only one pass through the list;
	void reverseList();
	
	// 5). count the number of elements in a doubly-linked list;
    public int count();
    
	// 6). insert an item exactly in the middle of a doubly-linked list;
    public void insertMiddle(int el);
    
    // 7). delete an element from a doubly-linked list;
    public void delete(int el);
}
