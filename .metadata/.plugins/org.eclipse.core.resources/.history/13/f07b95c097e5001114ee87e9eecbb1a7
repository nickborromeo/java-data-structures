// Nicholas Borromeo
// Carmel Jade T. Bual
// Doubly Linked List Exercise
// December 14, 2006

import java.io.*;

public class IntDLListTester2{
	
	public static void main(String[] args) throws IOException{
		
		IntDLList2 myList = new IntDLList2();
		
		while (true) {
	
		   int menu = mainMenu();	
		   process(menu, myList);
		
		}//end while
	}

	public static int mainMenu() throws IOException{
		
		System.out.println("\n\n<--- MAIN MENU --->");
		System.out.println("<1> Add to Head ");
		System.out.println("<2> Print List ");
		System.out.println("<3> Delete Ith Node ");
		System.out.println("<4> Insert Before ");
		System.out.println("<5> Insert After ");
		System.out.println("<6> Reverse ");
		System.out.println("<7> Count Elements");
		System.out.println("<8> Insert to Middle");
		System.out.println("<9> Delete Element");
		System.out.println("<0> Exit ");
		
		System.out.print("Your choice?  ");
		int choice = inputNumber();
		 
		return choice;
		
	}
	
	public static int inputNumber() throws IOException {
	   	
	   	BufferedReader stdin = new BufferedReader (new InputStreamReader(System.in));
		String input = stdin.readLine();
		int num = Integer.parseInt(input);
		
		return num;

    }
    
	public static void process(int choice, IntDLList2 list) throws IOException {
		
		switch(choice) {
			case 1:  addHead(list); break;
            case 2:  print(list); break;
            case 3:  deleteIth(list); break;
            case 4:  insBefore(list); break;
            case 5:  insAfter(list); break;
            case 6:  list.reverseList(); break;
            case 7:  countElem(list); break;
            case 8:  insMiddle(list); break;
            case 9:  deleteElem(list); break;
			case 0:  System.exit(0); break;
			default: System.out.println("\n\nWrong choice! Try again.");
		}
	}
	
	public static void addHead(IntDLList2 list) throws IOException {
		
		System.out.print("Input an integer: ");
		int number = inputNumber();
		list.addToDLListHead(number);
	}

	public static void addTail(IntDLList2 list) throws IOException {
		
		System.out.print("Input an integer: ");
		int number = inputNumber();
		list.addToDLListTail(number);
	}
	
	
	public static void print(IntDLList2 list) {
		if (!checkEmpty(list)) {		
			System.out.print("\n\nThe list contains : ");
			list.printAll();
		}
	}
	
	public static boolean checkEmpty(IntDLList2 list) {
		if (list.isEmpty()) {
			System.out.println("\n\nThe list is empty!");
			return true;
		}
		else
			return false;
	}
	
	public static void checkNumber(IntDLList2 list) throws IOException {
		
		System.out.print("Input an integer: ");
		int number = inputNumber();
		if (list.isInList(number))
			System.out.println("\n\nThe number is in the list.");
		else
			System.out.println("\n\nThe number is not in the list.");
		
	}
	
	public static void deleteIth(IntDLList2 list) throws IOException {
		if (!checkEmpty(list)) {
			System.out.print("Input an integer: ");
			int number = inputNumber();
			list.deleteIthNode(number);		
		}//end if
	}//end deleteIth
	
	public static void insBefore(IntDLList2 list) throws IOException{
		if (!checkEmpty(list)) {
			System.out.print("Input a Node: ");
			int number = inputNumber();
			if (list.isInList(number)){
				IntDLLNode p = new IntDLLNode(number);
				System.out.print("Input a Number: ");
				int num = inputNumber();
				list.insertBefore(p, num);
			}//end if
			else
				System.out.println("\n\nThe node is not in the list.");	
		}//end if
	}//end insBefore
	
	public static void insAfter(IntDLList2 list) throws IOException{
		if (!checkEmpty(list)) {
			System.out.print("Input a Node: ");
			int number = inputNumber();
			if (list.isInList(number)){
				IntDLLNode p = new IntDLLNode(number);
				System.out.print("Input a Number: ");
				int num = inputNumber();
				list.insertAfter(p, num);
			}//end if
			else
				System.out.println("\n\nThe node is not in the list.");	
		}//end if
	}//end insAfter
	
	public static void countElem(IntDLList2 list) {
		if(!checkEmpty(list)) {
			int num = list.count();
			System.out.println ("\nThere are " + num + " elements in the list.");
		}
	}
	
	public static void insMiddle(IntDLList2 list) throws IOException {
		if(!checkEmpty(list)) {
			int num;
			System.out.print("Input a Number: ");
			num = inputNumber();
			list.insertMiddle(num);
		}		
	}
	
	public static void deleteElem(IntDLList2 list) throws IOException{
		if (!checkEmpty(list)) {
			System.out.print("Input an integer: ");
			int number = inputNumber();
			list.delete(number);		
		}//end if
	}
}