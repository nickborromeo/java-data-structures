//Nicholas Borromeo
//Feb. 6, 2007
//BInary Search Tree - check if tree is perfectly balanced

import java.io.*;
import java.util.*;

import com.borrome.nodes.IntBSTNode;

public class ExtIntBST extends IntBST {
    
    protected int nodeNum = 0;
    protected int leafNum = 0;
    protected int rightChildNum = 0;
    protected int leftChildNum = 0;
    protected int treeHeight = 0;
    protected int minTreeHeight = 0;
    
    //count number of nodes
    public int countNode(){
        countNode(root);
        return nodeNum;
    }
    
    public int countNode(IntBSTNode p){
        if (p != null){
            countNode(p.left);
            countNode(p.right);
            nodeNum++;
        }
        return nodeNum;
    }
    
    public int countLeaves(){
        countLeaves(root);
        return leafNum;
    }   

    //count number of leaves
    public int countLeaves(IntBSTNode p){
        if (p != null){
            countLeaves(p.left);
            countLeaves(p.right);
            if(p.left == null && p.right == null)
                leafNum++;
        }
        return leafNum;
    }
    
    public int countRightChildren(){
        countRightChildren(root);
        return rightChildNum;
    }   

    //count number of right children
    public int countRightChildren(IntBSTNode p){
        if (p != null){
            countRightChildren(p.left);
            countRightChildren(p.right);
            if(p.right != null)
                rightChildNum++;
        }   
        return rightChildNum;
    }
    
    public int countLeftChildren(){
        countLeftChildren(root);
        return leftChildNum;
    }   
    
    //count number of left children
    public int countLeftChildren(IntBSTNode p){
        if (p != null){
            countLeftChildren(p.left);
            countLeftChildren(p.right);
            if(p.left != null)
                leftChildNum++;
        }   
        return leftChildNum;
    }
    
    public int height(){
        height(root);
        return treeHeight;
    }

    //tree height
    public int height(IntBSTNode p){
        if(p == null)
            return 0;
        else 
            treeHeight =  Math.max(height(p.right),height(p.left))+1;
                                                                                                                                                                                  
        return treeHeight;
    }
    
    public void mirror(){
        mirror(root);
    }
    
    public void mirror(IntBSTNode p){
        IntBSTNode temp;
        if(p != null){
            mirror(p.left);
            mirror(p.right);
            temp = p.left;
            p.left = p.right;
            p.right = temp;
        }//end if
    }
    
    public void deleteAllLeaves(){
    	IntBSTNode prev = null;
    	deleteAllLeaves(root,prev);
    }
    
    public void deleteAllLeaves(IntBSTNode p, IntBSTNode q){
    	
    	if(p != null){
    		if(p.left == null && p.right == null){
    			if(p.key > q.key)
    				q.right = null;
    			if(p.key < q.key)
    				q.left = null;
    		}
    		q = p;
    		deleteAllLeaves(p.left,q);
    		deleteAllLeaves(p.right,q);
    		
    	}//end if
    }
    
    public int minHeight(){
        minHeight(root);
        return minTreeHeight;
    }
    
    public int minHeight(IntBSTNode p){
        if(p == null)
            return 0;
        else 
            minTreeHeight =  Math.min(height(p.right),height(p.left))+1;
                                                                                                                                                                       
        return minTreeHeight;
    }
    
    public boolean checkPerfection(){
    	return checkPerfection(root);
    }
    
    public boolean checkPerfection(IntBSTNode p){
    	boolean balanced = false;
    	boolean pBalanced = false;
    	int min = minHeight();
    	int max = height();
    		
    	if(p != null){
	    	if(Math.abs(height(p.left) - height(p.right)) == 1 || Math.abs(height(p.left) - height(p.right)) == 0)
	    		balanced = true;
	    	if((max - min) == 1 || (max - min) == 0)
    			pBalanced = true;

	    	return (balanced && pBalanced && checkPerfection(p.left) && checkPerfection(p.right));
	    }
	    return true;
    }
    
}